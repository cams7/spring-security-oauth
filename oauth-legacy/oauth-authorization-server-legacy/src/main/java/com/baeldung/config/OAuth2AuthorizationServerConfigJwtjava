package com.baeldung.config;

import java.security.KeyPair;
import java.util.Arrays;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.ClassPathResource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
import org.springframework.security.oauth2.provider.token.TokenEnhancer;
import org.springframework.security.oauth2.provider.token.TokenEnhancerChain;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
import org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory;

@Configuration
@EnableAuthorizationServer
public class OAuth2AuthorizationServerConfigJwt extends AuthorizationServerConfigurerAdapter {

  private static final String KEY_STORE = "keystore200619.jks";
  private static final String KEY_STORE_PASSWORD = "abc123";
  private static final String KEY_PAIR_ALIAS = "oauth2_200619";
  private static final String KEY_PAIR_PASSWORD = "abc123";

  @Bean
  public TokenEnhancer tokenEnhancer() {
    return new CustomTokenEnhancer();
  }

  @Bean
  public BCryptPasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }

  @Autowired
  private BCryptPasswordEncoder passwordEncoder;

  @Bean
  public JwtAccessTokenConverter accessTokenConverter() {
    final JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    // converter.setSigningKey("123");

    KeyPair keyPair = keyPair(keyStoreKeyFactory());
    converter.setKeyPair(keyPair);
    return converter;
  }

  @Autowired
  private JwtAccessTokenConverter accessTokenConverter;

  @Bean
  public TokenStore tokenStore() {
    return new JwtTokenStore(accessTokenConverter);
  }

  @Autowired
  private TokenStore tokenStore;

  @Bean
  @Primary
  public DefaultTokenServices tokenServices() {
    final DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
    defaultTokenServices.setTokenStore(tokenStore);
    defaultTokenServices.setSupportRefreshToken(true);
    return defaultTokenServices;
  }

  @Autowired
  @Qualifier("authenticationManagerBean")
  private AuthenticationManager authenticationManager;

  @Override
  public void configure(final AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
    oauthServer.tokenKeyAccess("permitAll()").checkTokenAccess("isAuthenticated()");
  }

  @Override
  public void configure(final ClientDetailsServiceConfigurer clients) throws Exception {
    // @formatter:off
    clients.inMemory()
      .withClient("sampleClientId")
        .authorizedGrantTypes("implicit")
        .scopes("read", "write", "foo", "bar")
        .autoApprove(true)
        .accessTokenValiditySeconds(3600)
        .redirectUris("http://localhost:8083/","http://localhost:8086/")
      .and()
      .withClient("fooClientIdPassword")
        .secret(passwordEncoder.encode("secret"))
        .authorizedGrantTypes("password", "authorization_code", "refresh_token", "client_credentials")
        .scopes("foo", "read", "write")
        .autoApprove(true)
        .accessTokenValiditySeconds(3600)       // 1 hour
        .refreshTokenValiditySeconds(2592000)  // 30 days
        .redirectUris("http://www.example.com","http://localhost:8089/","http://localhost:8080/login/oauth2/code/custom","http://localhost:8080/ui-thymeleaf/login/oauth2/code/custom", "http://localhost:8080/authorize/oauth2/code/bael", "http://localhost:8080/login/oauth2/code/bael")
      .and()
      .withClient("barClientIdPassword")
        .secret(passwordEncoder.encode("secret"))
        .authorizedGrantTypes("password", "authorization_code", "refresh_token")
        .scopes("bar", "read", "write")
        .autoApprove(true)
        .accessTokenValiditySeconds(3600)       // 1 hour
        .refreshTokenValiditySeconds(2592000)  // 30 days
        .redirectUris("http://www.example.com")
      .and()
      .withClient("testImplicitClientId")
        .authorizedGrantTypes("implicit")
        .scopes("read", "write", "foo", "bar")
        .autoApprove(true)
        .redirectUris("http://www.example.com");
    } // @formatter:on

  @Override
  public void configure(final AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
    final TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
    tokenEnhancerChain.setTokenEnhancers(Arrays.asList(tokenEnhancer(), accessTokenConverter));
    endpoints.tokenStore(tokenStore).tokenEnhancer(tokenEnhancerChain).authenticationManager(
        authenticationManager);
  }

  private static KeyStoreKeyFactory keyStoreKeyFactory() {
    KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource(KEY_STORE),
        KEY_STORE_PASSWORD.toCharArray());
    return keyStoreKeyFactory;
  }

  private static KeyPair keyPair(KeyStoreKeyFactory keyStoreKeyFactory) {
    KeyPair keyPair = keyStoreKeyFactory.getKeyPair(KEY_PAIR_ALIAS, KEY_PAIR_PASSWORD.toCharArray());
    return keyPair;
  }

}
